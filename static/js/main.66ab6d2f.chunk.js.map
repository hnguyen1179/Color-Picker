{"version":3,"sources":["components/ColorBox.js","components/Navbar.js","components/Palette.js","utility/seedColors.js","components/SingleColorPalette.js","utility/noDelete.js","components/MiniPalette.js","components/PaletteList.js","utility/ColorUtility.js","components/NewPaletteSidebar.js","components/NewPaletteNav.js","components/PaletteSubmitForm.js","components/DraggableColorBox.js","components/DraggableColorList.js","components/NewPaletteForm.js","components/App.js","index.js"],"names":["ColorBox","props","state","copying","handleCopy","bind","this","setState","setTimeout","nameColor","format","moreUrl","singleColorPalette","text","onCopy","className","style","background","color","to","Component","Navbar","snackbar","handleFormatChange","handleClose","e","target","value","changeFormat","brightness","changeLevel","min","max","step","defaultValue","onChange","FormControl","Select","MenuItem","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","toUpperCase","action","IconButton","size","aria-label","onClick","fontSize","Palette","palette","renderColorBoxes","colors","map","colorObj","i","color400Hex","hexNoHash","id","paletteName","emoji","seedColors","SingleColorPalette","handleChangeFormat","idx","cantDelete","noDelete","includes","MiniPalette","handleDelete","stopPropagation","deletePalette","renderColors","PaletteList","palettes","renderLinks","COLOR_STEPS","inverseLuminance","luminanceValue","chroma","scale","Math","floor","addColorRange","output","length","colorRange","darken","mode","slice","reverse","j","chromaInstance","stepArray","colorObject","hex","luminance","rgb","css","rgba","replace","push","addSingleColorRange","arrayToHex","array","r","g","b","fontColor","NewPaletteSidebar","colorFormErrors","colorError","handleOnChange","debounce","handleAddColor","handleRecommendColor","throttle","handleGeneratePalette","clickClearPalette","clickEditColor","clickCancelEdit","apiErrorHandler","localStorage","getItem","prevProps","paletteColors","stringy","JSON","stringify","setItem","editColor","previous","colorNameError","fullPalette","duplicateColor","some","colorFromPalette","backgroundColor","border","x","resetErrors","changeColor","preventDefault","isValid","updatePalette","resetForm","errorMsg","setPalette","cancelEdit","fetch","method","credentials","body","model","then","response","json","data","result","catch","error","newPaletteColors","Set","maxNum","add","random","Array","from","pickFour","input","clearPalette","updateColor","originalColor","showSidebar","handleSidebarToggle","editButtons","addButton","type","disabled","onSubmit","disableAlpha","edit","NewPaletteNav","handleOpenInput","handleCloseInput","isEmpty","handleExit","renderShowTool","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","PaletteSubmitForm","handleOnTextChange","handleEmojiChange","handleEmojiDialog","label","validators","errorMessages","fullWidth","margin","DraggableColorBox","clickDelete","clickBox","selectColor","handleDeleteColor","renderEdit","editMode","transition","SortableElement","SortableContainer","index","NewPaletteForm","onSortEnd","oldIndex","newIndex","prev","paletteForm","arrayMove","parse","paletteNameError","showSubmission","exitBlock","handleAddPalette","handleConfirmDialog","handleBrowserBack","ValidatorForm","addValidationRule","every","toLowerCase","name","split","join","colorHex","newColors","filter","emojiObj","native","newPalette","convertPaletteName","savePalette","history","removeItem","newColor","when","axis","distance","App","findPalette","findSinglePalette","jsonPalette","renderProps","paletteId","match","params","find","undefined","newState","exact","path","render","routeProps","ReactDOM","document","getElementById"],"mappings":"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AAmBD,EAAQE,OAAO5B,GAAY6B,KAChD,SAACC,EAAUC,GAEP,IACMC,EADWN,EAAQE,OAAO,KACHG,GAAGE,UAEhC,OACI,cAAC,EAAD,CAEIpD,OAAQiD,EAASjD,GACjBD,UAAWkD,EAASlD,UACpBE,QAAO,gCAA2B4C,EAAQQ,GAAnC,YAAyCF,IAH3CD,MASrB,OACI,sBAAK7C,UAAU,UAAf,UAEI,cAAC,EAAD,CACIc,WAAYA,EACZC,YAAaxB,KAAKwB,YAClBF,aAActB,KAAKsB,eAIvB,qBAAKb,UAAU,iBAAf,SACKyC,IAIL,wBAAQzC,UAAU,iBAAlB,SACI,sBAAKA,UAAU,cAAf,UACI,8BAAMwC,EAAQS,cACd,sBAAMjD,UAAU,QAAhB,SAAyBwC,EAAQU,oB,GArEpB7C,aCiPtB8C,EArPI,CACf,CACIF,YAAa,qBACbD,GAAI,qBACJE,MAAO,eACPR,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACIO,YAAa,oBACbD,GAAI,oBACJE,MAAO,eACPR,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACIO,YAAa,iBACbD,GAAI,iBACJE,MAAO,qBACPR,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACIO,YAAa,UACbD,GAAI,UACJE,MAAO,qBACPR,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACIO,YAAa,oBACbD,GAAI,oBACJE,MAAO,eACPR,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UA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","file":"static/js/main.66ab6d2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport CopyToClipBoard from \"react-copy-to-clipboard\";\nimport { Link } from \"react-router-dom\";\n\nexport default class ColorBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            copying: false,\n        };\n\n        this.handleCopy = this.handleCopy.bind(this);\n    }\n\n    handleCopy() {\n        this.setState({ copying: true }, () => {\n            // setTimeout required to time this right after ballooning effect\n            setTimeout(() => {\n                this.setState({ copying: false });\n            }, 800);\n        });\n    }\n\n    render() {\n        const {\n            nameColor, // Contrast font color\n            format, // Color hex, rgb, or rgba\n            moreUrl, // 400 color hex code (color's id)\n            singleColorPalette = false, // Display as SCP?\n        } = this.props;\n\n        // Boolean to trigger copying animation and action\n        const { copying } = this.state;\n\n        return (\n            <CopyToClipBoard text={format} onCopy={this.handleCopy}>\n                <div className=\"ColorBox\" style={{ background: format }}>\n                    {/* Copy animation, color ballooning effect */}\n                    <div\n                        className={`copy-overlay ${copying && \"show\"}`}\n                        style={{ background: format }}\n                    />\n\n                    {/* Copy animation, hidden and triggered with copying boolean */}\n                    <div className={`copy-overlay-text ${copying && \"show\"}`}>\n                        <h1 style={{ color: nameColor }}>Copied</h1>\n                        <h4 style={{ color: nameColor }}>{format}</h4>\n                    </div>\n\n                    {/* Box's content; color name in desired format */}\n                    <div className=\"copy-container\">\n                        <div className=\"box-content\">\n                            <span style={{ color: nameColor }} className=\"name\">\n                                {format}\n                            </span>\n                        </div>\n                        <button className=\"copy\">copy</button>\n                    </div>\n\n                    {/* Box's content; 'more' button */}\n                    {/* SCP does not have a 'more' button */}\n                    {!singleColorPalette && (\n                        <Link\n                            to={moreUrl}\n                            style={{ color: nameColor }}\n                            className=\"more\"\n                        >\n                            <div>more</div>\n                        </Link>\n                    )}\n                </div>\n            </CopyToClipBoard>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n    Select,\n    MenuItem,\n    FormControl,\n    Snackbar,\n    IconButton,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slider from \"rc-slider\";\n\nimport \"rc-slider/assets/index.css\";\n\nexport default class Navbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            snackbar: false,\n            format: \"hex\",\n        };\n\n        this.handleFormatChange = this.handleFormatChange.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    // Handles changing of format\n    handleFormatChange(e) {\n        // This part changes the design of the navbar\n        this.setState({ format: e.target.value }, () => {\n            this.setState({ snackbar: true });\n        });\n\n        // This part changes the data fed into this page; new format changed\n        this.props.changeFormat(e.target.value);\n    }\n\n    // Closes snackbar\n    handleClose() {\n        this.setState({ snackbar: false });\n    }\n\n    render() {\n        const {\n            brightness, // Integer: denotes brightness of palette; default 400.\n            changeLevel, // Function: adjusts level of brightness w/ slider \n            singleColorPalette = false, // Boolean: indicate whether SCP \n        } = this.props;\n        \n        const {\n            snackbar, // Boolean: indicates whether to open snackbar compoonent \n            format // String: format of the color (hex, rgb, rgba)\n        } = this.state;\n\n        return (\n            <div className=\"Navbar\">\n                {/* Links to palette list page */}\n                <div className=\"Navbar__title\">\n                    <Link to=\"/React-Colors\">\n                        <h2>React Colors</h2>\n                    </Link>\n                </div>\n\n                {/* Slider to adjust the level of brightness of palette */}\n                <div className=\"slider-container\">\n                    <div className=\"level\">{brightness}</div>\n                    {!singleColorPalette && (\n                        <div className=\"slider\">\n                            <Slider\n                                min={100}\n                                max={800}\n                                step={100}\n                                defaultValue={brightness}\n                                onChange={changeLevel}\n                            />\n                        </div>\n                    )}\n                </div>\n\n                {/* Dropdown to change format to copy */}\n                <div className=\"select-container\">\n                    <FormControl className=\"form\">\n                        <Select\n                            value={format}\n                            onChange={this.handleFormatChange}\n                        >\n                            <MenuItem value=\"hex\">HEX</MenuItem>\n                            <MenuItem value=\"rgb\">RGB</MenuItem>\n                            <MenuItem value=\"rgba\">RGBA</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n\n                {/* Visual indicator that format has been changed */}\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"left\",\n                    }}\n                    open={snackbar}\n                    autoHideDuration={3000}\n                    onClose={this.handleClose}\n                    message={\n                        <span className=\"snackbar-msg\">\n                            Format changed to {format.toUpperCase()}\n                        </span>\n                    }\n                    action={\n                        <>\n                            <IconButton\n                                size=\"small\"\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                onClick={this.handleClose}\n                            >\n                                <CloseIcon fontSize=\"small\" />\n                            </IconButton>\n                        </>\n                    }\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport ColorBox from \"./ColorBox\";\nimport Navbar from \"./Navbar\";\nexport default class Palette extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            brightness: 400,\n            format: \"hex\",\n        };\n\n        this.changeLevel = this.changeLevel.bind(this);\n        this.changeFormat = this.changeFormat.bind(this);\n    }\n\n    // Changes the level of luminosity of the colors\n    changeLevel(brightness) {\n        this.setState({ brightness });\n    }\n\n    // Changes the format of the colors to be copied\n    changeFormat(format) {\n        this.setState({ format });\n    }\n\n    render() {\n        const {\n            brightness, // Integer: Evaluates to current luminosity level; default is 400 \n            format // String: denotes whether hex, rgb, or rgba\n        } = this.state;\n\n        const {\n            palette // Object: {str: paletteName, str: id, strArr: colors, str: emoji }\n        } = this.props;\n\n        // Renders a list of colorboxes based on the current brightness level,\n        const renderColorBoxes = palette.colors[brightness].map(\n            (colorObj, i) => {\n                // Finds the color's 400 hex id in order to set as the defacto color id for URL\n                const color400 = palette.colors[400];\n                const color400Hex = color400[i].hexNoHash;\n\n                return (\n                    <ColorBox\n                        key={i}\n                        format={colorObj[format]}\n                        nameColor={colorObj.nameColor}\n                        moreUrl={`/React-Colors/palette/${palette.id}/${color400Hex}`}\n                    />\n                );\n            }\n        );\n\n        return (\n            <div className=\"Palette\">\n                {/* Navbar which includes the slider and format selector */}\n                <Navbar\n                    brightness={brightness}\n                    changeLevel={this.changeLevel}\n                    changeFormat={this.changeFormat}\n                />\n\n                {/* Rendered color boxes */}\n                <div className=\"Palette-colors\">\n                    {renderColorBoxes}\n                </div>\n\n                {/* Footer content; palette name and emoji */}\n                <footer className=\"Palette-footer\">\n                    <div className=\"footer-text\">\n                        <div>{palette.paletteName}</div>\n                        <span className=\"emoji\">{palette.emoji}</span>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n","const seedColors = [\n    {\n        paletteName: \"Material UI Colors\",\n        id: \"material-ui-colors\",\n        emoji: \"🎨\",\n        colors: [\n            \"#F44336\",\n            \"#E91E63\",\n            \"#9C27B0\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#2196F3\",\n            \"#03A9F4\",\n            \"#00BCD4\",\n            \"#009688\",\n            \"#4CAF50\",\n            \"#8BC34A\",\n            \"#CDDC39\",\n            \"#FFEB3B\",\n            \"#FFC107\",\n            \"#FF9800\",\n            \"#FF5722\",\n            \"#795548\",\n            \"#9E9E9E\",\n            \"#607D8B\",\n        ],\n    },\n    {\n        paletteName: \"Flat UI Colors v1\",\n        id: \"flat-ui-colors-v1\",\n        emoji: \"🤙\",\n        colors: [\n            \"#1abc9c\",\n            \"#2ecc71\",\n            \"#3498db\",\n            \"#9b59b6\",\n            \"#34495e\",\n            \"#16a085\",\n            \"#27ae60\",\n            \"#2980b9\",\n            \"#8e44ad\",\n            \"#2c3e50\",\n            \"#f1c40f\",\n            \"#e67e22\",\n            \"#e74c3c\",\n            \"#ecf0f1\",\n            \"#95a5a6\",\n            \"#f39c12\",\n            \"#d35400\",\n            \"#c0392b\",\n            \"#bdc3c7\",\n            \"#7f8c8d\",\n        ],\n    },\n    {\n        paletteName: \"Bold UI Colors\",\n        id: \"bold-ui-colors\",\n        emoji: \"🅱️\",\n        colors: [\n            \"#FFC312\",\n            \"#C4E538\",\n            \"#12CBC4\",\n            \"#FDA7DF\",\n            \"#ED4C67\",\n            \"#F79F1F\",\n            \"#A3CB38\",\n            \"#1289A7\",\n            \"#D980FA\",\n            \"#B53471\",\n            \"#EE5A24\",\n            \"#009432\",\n            \"#0652DD\",\n            \"#9980FA\",\n            \"#833471\",\n            \"#EA2027\",\n            \"#006266\",\n            \"#1B1464\",\n            \"#5758BB\",\n            \"#6F1E51\",\n        ],\n    },\n    {\n        paletteName: \"Pastels\",\n        id: \"pastels\",\n        emoji: \"🏵️\",\n        colors: [\n            \"#55efc4\",\n            \"#81ecec\",\n            \"#74b9ff\",\n            \"#a29bfe\",\n            \"#dfe6e9\",\n            \"#00b894\",\n            \"#00cec9\",\n            \"#0984e3\",\n            \"#6c5ce7\",\n            \"#b2bec3\",\n            \"#ffeaa7\",\n            \"#fab1a0\",\n            \"#ff7675\",\n            \"#fd79a8\",\n            \"#636e72\",\n            \"#fdcb6e\",\n            \"#e17055\",\n            \"#d63031\",\n            \"#e84393\",\n            \"#2d3436\",\n        ],\n    },\n    {\n        paletteName: \"Flat UI Colors v2\",\n        id: \"flat-ui-colors-v2\",\n        emoji: \"👊\",\n        colors: [\n            \"#f6e58d\",\n            \"#ffbe76\",\n            \"#ff7979\",\n            \"#badc58\",\n            \"#dff9fb\",\n            \"#f9ca24\",\n            \"#f0932b\",\n            \"#eb4d4b\",\n            \"#6ab04c\",\n            \"#c7ecee\",\n            \"#7ed6df\",\n            \"#e056fd\",\n            \"#686de0\",\n            \"#30336b\",\n            \"#95afc0\",\n            \"#22a6b3\",\n            \"#be2edd\",\n            \"#4834d4\",\n            \"#130f40\",\n            \"#535c68\",\n        ],\n    },\n    {\n        paletteName: \"Bold UI Colors v2\",\n        id: \"bold-ui-colors-v2\",\n        emoji: \"🅱️\",\n        colors: [\n            \"#00a8ff\",\n            \"#9c88ff\",\n            \"#fbc531\",\n            \"#4cd137\",\n            \"#487eb0\",\n            \"#0097e6\",\n            \"#8c7ae6\",\n            \"#e1b12c\",\n            \"#44bd32\",\n            \"#40739e\",\n            \"#e84118\",\n            \"#f5f6fa\",\n            \"#7f8fa6\",\n            \"#273c75\",\n            \"#353b48\",\n            \"#c23616\",\n            \"#dcdde1\",\n            \"#718093\",\n            \"#192a56\",\n            \"#2f3640\",\n        ],\n    },\n    {\n        paletteName: \"Spanish Countryside\",\n        id: \"spanish-countryside\",\n        emoji: \"🇪🇸\",\n        colors: [\n            \"#40407a\",\n            \"#706fd3\",\n            \"#f7f1e3\",\n            \"#34ace0\",\n            \"#33d9b2\",\n            \"#2c2c54\",\n            \"#474787\",\n            \"#aaa69d\",\n            \"#227093\",\n            \"#218c74\",\n            \"#ff5252\",\n            \"#ff793f\",\n            \"#d1ccc0\",\n            \"#ffb142\",\n            \"#ffda79\",\n            \"#b33939\",\n            \"#cd6133\",\n            \"#84817a\",\n            \"#cc8e35\",\n            \"#ccae62\",\n        ],\n    },\n    {\n        paletteName: \"Sorbet\",\n        id: \"sorbet\",\n        emoji: \"🍦\",\n        colors: [\n            \"#FEA47F\",\n            \"#25CCF7\",\n            \"#EAB543\",\n            \"#55E6C1\",\n            \"#CAD3C8\",\n            \"#F97F51\",\n            \"#1B9CFC\",\n            \"#F8EFBA\",\n            \"#58B19F\",\n            \"#2C3A47\",\n            \"#B33771\",\n            \"#3B3B98\",\n            \"#FD7272\",\n            \"#9AECDB\",\n            \"#D6A2E8\",\n            \"#6D214F\",\n            \"#182C61\",\n            \"#FC427B\",\n            \"#BDC581\",\n            \"#82589F\",\n        ],\n    },\n    {\n        paletteName: \"Game Colors\",\n        id: \"game-colors\",\n        emoji: \"👾\",\n        colors: [\n            \"#fad390\",\n            \"#f8c291\",\n            \"#6a89cc\",\n            \"#82ccdd\",\n            \"#b8e994\",\n            \"#f6b93b\",\n            \"#e55039\",\n            \"#4a69bd\",\n            \"#60a3bc\",\n            \"#78e08f\",\n            \"#fa983a\",\n            \"#eb2f06\",\n            \"#1e3799\",\n            \"#3c6382\",\n            \"#38ada9\",\n            \"#e58e26\",\n            \"#b71540\",\n            \"#0c2461\",\n            \"#0a3d62\",\n            \"#079992\",\n        ],\n    },\n];\n\nexport default seedColors;\n","import React, { Component } from \"react\";\n\nimport ColorBox from \"./ColorBox\";\nimport Navbar from \"./Navbar\";\n\nexport default class SingleColorPalette extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            format: \"hex\",\n        };\n\n        this.handleChangeFormat = this.handleChangeFormat.bind(this);\n    }\n\n    handleChangeFormat(format) {\n        this.setState({ format });\n    }\n\n    render() {\n        // String: denotes format: hex, rgb, rgba\n        const { format } = this.state;\n\n        // Object: { str: paletteName, str: id, strArr: colors, str: emoji}\n        const { palette } = this.props;\n\n        // Renders the colorboxes\n        const renderColorBoxes = palette.colors.map((colorObj, idx) => {\n            return (\n                <ColorBox\n                    key={idx}\n                    nameColor={colorObj.nameColor}\n                    singleColorPalette={true}\n                    format={colorObj[format]}\n                />\n            );\n        });\n\n        return (\n            <div className=\"SCP\">\n                {/* Navbar for SCP; includes app name and format selector */}\n                <Navbar\n                    singleColorPalette={true}\n                    changeFormat={this.handleChangeFormat}\n                />\n\n                {/* Rendered single colors */}\n                <div className=\"SCP__colorbox-container\">\n                    {renderColorBoxes}\n                </div>\n\n                {/* Footer for SCP; includes palette name and emoji */}\n                <div className=\"SCP__footer\">\n                    <div>{palette.paletteName}</div>\n                    <span className=\"emoji\">{palette.emoji}</span>\n                </div>\n            </div>\n        );\n    }\n}\n","const cantDelete = [\n    \"material-ui-colors\",\n    \"flat-ui-colors-v1\",\n    \"bold-ui-colors\",\n    \"pastels\",\n    \"flat-ui-colors-v2\",\n    \"bold-ui-colors-v2\",\n    \"spanish-countryside\",\n    \"sorbet\",\n    \"game-colors\",\n];\n\nexport const noDelete = (id) => {\n    if (cantDelete.includes(id)) return false;\n    return true;\n};\n","import React, { Component } from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport { noDelete } from \"../utility/noDelete\";\n\nexport default class MiniPalette extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleDelete(e) {\n        e.stopPropagation();\n\n        const {\n            deletePalette,\n            palette: { id },\n        } = this.props;\n\n        deletePalette(id);\n    }\n\n    render() {\n        const {\n            palette: {\n                paletteName, // String: Name of Palette 'Material UI Colors'\n                emoji, // String: Assigned emoji\n                colors, // String Array: colors in palette\n                id, // String: Id of Palette 'material-ui-colors'\n            },\n        } = this.props;\n\n        // Renders mini colorboxes in each mini palette\n        const renderColors = colors.map((color) => {\n            return (\n                <div\n                    key={color}\n                    className=\"MiniPalette__colorboxes__colorbox\"\n                    style={{ background: color }}\n                />\n            );\n        });\n\n        return (\n            <div className=\"MiniPalette\">\n                {/* Renders mini color boxes */}\n                <div className=\"MiniPalette__colorboxes\">{renderColors}</div>\n\n                {/* Content of mini palette; name and emoji */}\n                <div className=\"MiniPalette__bottom\">\n                    <h1> {paletteName} </h1>\n                    <span> {emoji} </span>\n                </div>\n\n                {/* Delete button for each mini palette. noDelete checks for \n                'seed' palettes, which cannot be deleted */}\n                {noDelete(id) && (\n                    <button\n                        className=\"MiniPalette__delete\"\n                        onClick={this.handleDelete}\n                    >\n                        <DeleteIcon />\n                    </button>\n                )}\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport MiniPalette from \"./MiniPalette\";\nexport default class PaletteList extends Component {\n    render() {\n        const {\n            palettes, // Object Array: An array of all palette objects\n            deletePalette // Function: deletes a palette based on palette.id \n        } = this.props;\n\n        // Renders all of the mini palettes to be used as links to their palette page\n        const renderLinks = palettes.map((palette) => {\n            return (\n                <Link\n                    key={palette.id}\n                    to={`/React-Colors/palette/${palette.id}`}\n                    className=\"\"\n                >\n                    <MiniPalette\n                        palette={palette}\n                        deletePalette={deletePalette}\n                    />\n                </Link>\n            );\n        });\n\n        return (\n            <div className=\"PaletteList\">\n                {/* Navbar, includes name of app and 'create palette' button */}\n                <nav className=\"PaletteList__nav\">\n                    <div className=\"PaletteList__nav__content\">\n                        <h1 className=\"PaletteList__nav__content__title\">\n                            React Colors\n                        </h1>\n                        <Link\n                            to=\"/React-Colors/palette/new\"\n                            className=\"PaletteList__nav__content__create\"\n                        >\n                            <div>Create Palette</div>\n                        </Link>\n                    </div>\n                </nav>\n\n                {/* Rendered list of mini palettes */}\n                <div className=\"PaletteList__container\">\n                    <div className=\"PaletteList__body\">\n                        {renderLinks}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import chroma from \"chroma-js\";\n\nconst COLOR_STEPS = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction inverseLuminance(luminanceValue) {\n    let bwScale = chroma.scale([\"white\", \"black\"]).colors(2);\n    let luminanceIndex = Math.floor(luminanceValue * 2);\n    return bwScale[luminanceIndex];\n}\n\nfunction addColorRange(palette) {\n    const output = {};\n\n    for (let i = 0; i < palette.colors.length; i++) {\n        const color = palette.colors[i];\n        const colorRange = chroma\n            .scale([chroma(color).darken(1.4), chroma(color), \"white\"])\n            .mode(\"lab\")\n            .colors(COLOR_STEPS.length + 1, \"null\")\n            .slice(0, 10)\n            .reverse();\n\n        for (let j = 0; j < COLOR_STEPS.length; j++) {\n            let chromaInstance = colorRange[j];\n\n            if (!output[COLOR_STEPS[j]]) output[COLOR_STEPS[j]] = [];\n            let stepArray = output[COLOR_STEPS[j]];\n\n            let colorObject = {\n                hex: chromaInstance.hex(),\n                hexNoHash: chromaInstance.hex().slice(1),\n                nameColor: inverseLuminance(\n                    chroma(chromaInstance.hex()).luminance()\n                ),\n                rgb: chromaInstance.css(),\n                rgba: chromaInstance.css().replace(\")\", \", 1.0)\"),\n            };\n\n            stepArray.push(colorObject);\n        }\n    }\n\n    return { ...palette, colors: output };\n}\n\nfunction addSingleColorRange(palette, color) {\n    const colorRange = chroma\n        .scale([chroma(color).darken(1.4), chroma(color), \"white\"])\n        .mode(\"lab\")\n        .colors(COLOR_STEPS.length + 1, \"null\")\n        .slice(0, 10)\n        .reverse();\n\n    return {\n        ...palette,\n        colors: colorRange.map((colorObj) => {\n            return {\n                hex: colorObj.hex(),\n                hexNoHash: colorObj.hex().slice(1),\n                nameColor: inverseLuminance(chroma(colorObj.hex()).luminance()),\n                rgb: colorObj.css(),\n                rgba: colorObj.css().replace(\")\", \", 1.0)\"),\n            };\n        }),\n    };\n}\n\nfunction arrayToHex(array) {\n    return array.map((rgb) => {\n        const [r, g, b] = rgb;\n        return chroma(r, g, b).hex();\n    });\n}\n\nfunction hexToArray(array) {\n    return array.map((hex) => {\n        return chroma(hex).rgb();\n    });\n}\n\nfunction pickFour(array) {\n    const output = new Set();\n    const maxNum = array.length;\n\n    while (output.size < 4) {\n        output.add(Math.floor(Math.random() * maxNum));\n    }\n\n    return Array.from(output).map((idx) => array[idx]);\n}\n\nfunction fontColor(color) {\n    if (!color) return;\n    return chroma(color).luminance() > 0.5 ? \"black\" : \"white\";\n}\n\nexport {\n    COLOR_STEPS,\n    addColorRange,\n    addSingleColorRange,\n    arrayToHex,\n    hexToArray,\n    pickFour,\n    fontColor,\n};\n","import React, { Component } from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport { debounce, throttle } from \"lodash\";\n\nimport {\n    arrayToHex,\n    fontColor,\n    hexToArray,\n    pickFour,\n} from \"../utility/ColorUtility\";\n\nexport default class NewPaletteSidebar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: \"#000000\",\n            colorFormErrors: {\n                colorError: \"\",\n            },\n        };\n\n        this.handleOnChange = debounce(this.handleOnChange.bind(this), 2);\n        this.handleAddColor = this.handleAddColor.bind(this);\n        this.handleRecommendColor = throttle(\n            this.handleRecommendColor.bind(this),\n            300\n        );\n        this.handleGeneratePalette = debounce(\n            this.handleGeneratePalette.bind(this),\n            500\n        );\n        this.clickClearPalette = this.clickClearPalette.bind(this);\n        this.clickEditColor = this.clickEditColor.bind(this);\n        this.clickCancelEdit = this.clickCancelEdit.bind(this);\n        this.apiErrorHandler = this.apiErrorHandler.bind(this);\n    }\n\n    componentDidMount() {\n        // Generates a random palette if currentEdit isn't present in lS\n        if (!localStorage.getItem(\"currentEdit\")) {\n            this.handleGeneratePalette();\n        }\n    }\n\n    // Saves into localStorage the currentEdit\n    componentDidUpdate(prevProps) {\n        // This is to save the current palette in the event that the user\n        // accidentally refreshes the page\n        if (\n            this.props.paletteColors.length !== prevProps.paletteColors.length\n        ) {\n            const stringy = JSON.stringify(this.props.paletteColors);\n            localStorage.setItem(\"currentEdit\", stringy);\n        }\n\n        // This is used to keep track of the current edited color. If a user\n        // clicks on a color, it will update editColor.edit = true\n        // and set the editColor.index, editColor.color, editColor.newColor\n        if (this.props.editColor.color !== prevProps.editColor.color) {\n            this.setState({ color: this.props.editColor.color });\n        }\n    }\n\n    // Resets all of the errors to blank\n    resetErrors() {\n        this.setState((previous) => {\n            return {\n                ...previous,\n                colorFormErrors: {\n                    colorNameError: \"\",\n                },\n            };\n        });\n    }\n\n    // Resets the form to default; used after adding colors\n    resetForm() {\n        this.setState((previous) => {\n            return {\n                ...previous,\n                color: previous.color,\n            };\n        });\n    }\n\n    // Error Checker for adding colors\n    isValid() {\n        const { paletteColors } = this.props;\n        const { color } = this.state;\n\n        let colorError = \"\";\n\n        const fullPalette = paletteColors.length === 20;\n\n        const duplicateColor = paletteColors.some((colorFromPalette) => {\n            return colorFromPalette === color;\n        });\n\n        if (duplicateColor) {\n            colorError = (\n                <div className=\"color-error\">\n                    Cannot have duplicate color:\n                    <div\n                        style={{\n                            backgroundColor: color,\n                            border: \"1px solid rgba(0, 0, 0, 0.212)\",\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        if ([fullPalette, duplicateColor].some((x) => x === true)) {\n            this.setState(\n                {\n                    colorFormErrors: {\n                        colorError,\n                    },\n                },\n                () => {\n                    setTimeout(() => {\n                        this.resetErrors();\n                    }, 3000);\n                }\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Ran when color picker picks a new color, changes the color to edit to color\n     * which requires changing the editColor object's color\n     * */\n\n    handleOnChange(color) {\n        this.setState({ color: color.hex });\n        this.props.changeColor(color.hex);\n    }\n\n    // Updates the palette with a new color\n    handleAddColor(e) {\n        e.preventDefault();\n        if (!this.isValid()) return;\n\n        this.props.updatePalette(this.state.color);\n        this.resetForm();\n    }\n\n    apiErrorHandler(errorMsg) {\n        this.setState(\n            {\n                colorFormErrors: {\n                    colorError: errorMsg,\n                },\n            },\n            () => {\n                setTimeout(() => {\n                    this.resetErrors();\n                }, 3000);\n            }\n        );\n    }\n\n    /**\n     *\n     * Both of the API calls below will need to go through a cors proxy\n     * in order to run, due to colormind only being hosted via http and so\n     * a mixed-content error comes up\n     *\n     * cors proxy: https://guarded-plateau-27863.herokuapp.com/\n     *\n     * */\n\n    // Hits the colormind API to generate a random 5-color palette\n    handleGeneratePalette() {\n        const { setPalette, cancelEdit } = this.props;\n\n        const url =\n            \"https://guarded-plateau-27863.herokuapp.com/http://colormind.io/api/\";\n        const data = {\n            model: \"default\",\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            credentials: \"omit\",\n            body: JSON.stringify(data),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                setPalette(arrayToHex(data.result));\n                this.setState({ color: \"#000000\" });\n                cancelEdit();\n            })\n            .catch((error) => {\n                this.apiErrorHandler(error);\n            });\n    }\n\n    // Hits the colormind API to generate a recommended color based on current palette\n    handleRecommendColor() {\n        const { updatePalette, paletteColors } = this.props;\n\n        if (paletteColors.length === 20 || paletteColors.length + 1 > 20) return;\n        const newPaletteColors = hexToArray(pickFour(paletteColors));\n        newPaletteColors.push(\"N\");\n\n        const url =\n            \"https://guarded-plateau-27863.herokuapp.com/http://colormind.io/api/\";\n        const data = {\n            model: \"default\",\n            input: newPaletteColors,\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            credentials: \"omit\",\n            body: JSON.stringify(data),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                updatePalette(arrayToHex(data.result)[data.result.length - 1]);\n            })\n            .catch((error) => {\n                this.apiErrorHandler(error);\n            });\n    }\n\n    // Clears the palette of all colors\n    clickClearPalette() {\n        const { clearPalette } = this.props;\n        clearPalette();\n        this.setState({ color: \"#000000\" });\n    }\n\n    // Finalizes the editing a color, changing it within the palette\n    clickEditColor(e) {\n        e.preventDefault();\n        const { updateColor, editColor } = this.props;\n        const { color } = this.state;\n\n        updateColor(editColor.originalColor, color);\n    }\n\n    // Cancels the edit and reverts the color to original color\n    clickCancelEdit(e) {\n        e.preventDefault();\n\n        const { cancelEdit } = this.props;\n        cancelEdit();\n    }\n\n    render() {\n        const {\n            color, // String: hex of current color selected by color picker\n            colorFormErrors: { colorError }, // String: Error Message for duplicates\n        } = this.state;\n\n        const {\n            showSidebar, // Boolean: condition to show sidebar\n            handleSidebarToggle, // Function: opens the sidebar, changing showSidebar in parent\n            paletteColors, // String Array: palette's colors (hex, rgb, rgba)\n            editColor, // Object: {str: color, str: originalColor, bool: edit}\n        } = this.props;\n\n        const editButtons = (\n            // Edit Color menu; has two buttons: confirming the change or canceling it\n            <div className=\"edit-buttons\">\n                <button\n                    className=\"edit-color-button\"\n                    onClick={this.clickEditColor}\n                >\n                    <div>\n                        <h2> Edit Color </h2>\n                    </div>\n                </button>\n\n                <button\n                    className=\"cancel-edit-button\"\n                    onClick={this.clickCancelEdit}\n                >\n                    <div>\n                        <h2> Cancel </h2>\n                    </div>\n                </button>\n            </div>\n        );\n\n        const addButton = (\n            // Add color button\n            <button\n                type=\"submit\"\n                className=\"add-color-button\"\n                disabled={paletteColors.length === 20}\n            >\n                <div\n                    className=\"add-color-button__text\"\n                    style={{\n                        backgroundColor: color,\n                        color: fontColor(color),\n                    }}\n                >\n                    <h2> Add Color</h2>\n                </div>\n            </button>\n        );\n\n        return (\n            <div className={`NewPaletteForm__sidebar ${showSidebar && \"show\"}`}>\n                {/* Button which toggles hiding of sidebar */}\n                <div className=\"NewPaletteForm__sidebar__nav\">\n                    <div onClick={handleSidebarToggle}>hide tool</div>\n                </div>\n\n                {/* 3 Buttons: generate random palette, recommend color, and clear palette */}\n                <div className=\"NewPaletteForm__sidebar__head\">\n                    <button\n                        className=\"random-palette-button\"\n                        onClick={this.handleGeneratePalette}\n                    >\n                        <h3>Generate Random Palette</h3>\n                    </button>\n                    <button\n                        className=\"random-color-button\"\n                        onClick={this.handleRecommendColor}\n                        disabled={\n                            paletteColors.length < 4 ||\n                            paletteColors.length >= 20\n                        }\n                    >\n                        <h3>Recommend a Color</h3>\n                    </button>\n                    <button\n                        className=\"clear-button\"\n                        onClick={this.clickClearPalette}\n                    >\n                        <h3>Clear Palette</h3>\n                    </button>\n                </div>\n\n                {/* Form that adds color on submission */}\n                <form onSubmit={this.handleAddColor}>\n                    <ChromePicker\n                        disableAlpha\n                        color={color}\n                        onChange={this.handleOnChange}\n                    />\n                    <div className=\"color-input\">\n                        <ul className=\"error-list\">\n                            <li> {colorError} </li>\n                        </ul>\n                    </div>\n\n                    {/* If edit, show edit menu options */}\n                    {editColor.edit ? editButtons : addButton}\n                </form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default class NewPaletteNav extends Component {\n    render() {\n        const {\n            showSidebar, // Boolean: indicates to show sidebar\n            handleSidebarToggle, // Function: changes showSidebar boolean in parent\n            handleOpenInput, // Function: handles opening any pop up \n            handleCloseInput, // Function: handles closing any pop up\n            open, // Boolean: Condition to open 'Leave Confirmation' pop up \n            isEmpty, // Boolean: Prevents saving of an empty palette \n            handleExit, // Function: handles clicking 'Leave' within 'Leave Confirmation'\n        } = this.props;\n\n        // Button to prompt showing sidebar \n        const renderShowTool = (\n            <div className=\"toggle-sidebar-nav\" onClick={handleSidebarToggle}>\n                show tool\n            </div>\n        );\n\n        return (\n            <nav className=\"NewPaletteForm__main__nav\">\n                <div className=\"NewPaletteForm__main__nav__content\">\n                    {/* Left Content of Nav; show tool button and page name */}\n                    <div className=\"NewPaletteForm__main__nav__content--left\">\n                        {!showSidebar && renderShowTool}\n                        <div className={`title ${showSidebar && \"show\"}`}>\n                            Create Palette\n                        </div>\n                    </div>\n\n                    {/* Right Content or Nav; save palette button */}\n                    <div className=\"NewPaletteForm__main__nav__content--right\">\n                        <button\n                            className=\"save-palette-button\"\n                            onClick={handleOpenInput}\n                            disabled={isEmpty}\n                        >\n                            <div>Save Palette</div>\n                        </button>\n                    </div>\n                </div>\n\n                {/* 'Leave Confirmation' Pop Up */}\n                <Dialog\n                    open={open === \"pickConfirm\"}\n                    onClose={handleCloseInput}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {\"Leave without saving palette?\"}\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Any work done on an unsaved palette will be lost.\n                            Are you sure you want to leave without saving?\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleExit} color=\"primary\">\n                            Leave\n                        </Button>\n                        <Button\n                            onClick={handleCloseInput}\n                            color=\"primary\"\n                            autoFocus\n                        >\n                            Stay\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </nav>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\n\nimport \"emoji-mart/css/emoji-mart.css\";\n\nclass PaletteSubmitForm extends Component {\n    render() {\n        const {\n            open, // Boolean: conditional for opening pop up\n            handleCloseInput, // Function: closes any pop up open\n            handleOnTextChange, // Function: handles typing of palette name \n            handleEmojiChange, // Function: handles selection of emoji\n            handleEmojiDialog, // Function: opens emoji selection pop up\n            paletteName, // String: 'Material UI Colors'\n        } = this.props;\n\n        return (\n            <>\n                <Dialog\n                    className=\"PaletteSubmitForm\"\n                    open={open === \"pickPaletteName\"}\n                    onClose={handleCloseInput}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        Palette Name\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter a palette name for your new palette.\n                            Make sure it's unique!\n                        </DialogContentText>\n                        <ValidatorForm onSubmit={handleEmojiDialog}>\n                            <TextValidator\n                                label=\"Palette Name\"\n                                value={paletteName ?? \"\"}\n                                onChange={handleOnTextChange}\n                                validators={[\"required\", \"isPaletteNameUnique\"]}\n                                errorMessages={[\n                                    \"Name cannot be blank\",\n                                    \"Cannot have duplicate palette names\",\n                                ]}\n                                fullWidth\n                                margin=\"normal\"\n                            />\n                            <DialogActions>\n                                <Button\n                                    onClick={handleCloseInput}\n                                    color=\"primary\"\n                                >\n                                    Cancel\n                                </Button>\n                                <Button type=\"submit\" color=\"primary\">\n                                    Next\n                                </Button>\n                            </DialogActions>\n                        </ValidatorForm>\n                    </DialogContent>\n                </Dialog>\n\n                <Dialog open={open === \"pickEmoji\"} onClose={handleCloseInput}>\n                    <DialogTitle id=\"form-dialog-title\">Emoji</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Pick an emoji to represent your new palette\n                        </DialogContentText>\n                        <Picker onClick={handleEmojiChange} />\n                    </DialogContent>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport default PaletteSubmitForm;\n","import React, { Component } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport DeleteSharpIcon from \"@material-ui/icons/DeleteSharp\";\nimport { fontColor } from \"../utility/ColorUtility\";\n\nclass DraggableColorBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.clickDelete = this.clickDelete.bind(this);\n        this.clickBox = this.clickBox.bind(this);\n    }\n\n    // Selects the clicked colorbox to be edited\n    clickBox() {\n        const { selectColor, color, showSidebar } = this.props;\n\n        // Will not be selected if 'sidebar' component isn't active\n        if (!showSidebar) return;\n        selectColor(color);\n    }\n\n    // Deletes the selected color\n    clickDelete(e) {\n        const { handleDeleteColor, color } = this.props;\n        e.stopPropagation();\n        handleDeleteColor(color);\n    }\n\n    render() {\n        const { color, editColor } = this.props;\n\n        // Previews the color to be edited to\n        const renderEdit = (\n            <>\n                <div\n                    className=\"draggable-colorbox--edit\"\n                    style={{\n                        backgroundColor: editColor.color,\n                    }}\n                />\n            </>\n        );\n\n        /**\n         * Boolean that triggers when\n         *  1. When editColor.edit is true\n         *  2. When the color in the current colorbox is the current color being edited\n         *\n         * Every colorbox runs this check, but the preview (renderEdit)\n         * will only show if the edited (selected) color === colorbox color\n         *  */\n\n        const editMode = editColor.edit && editColor.originalColor === color;\n\n        return (\n            <div\n                className=\"draggable-colorbox-container\"\n                onClick={this.clickBox}\n            >\n                <div\n                    className=\"draggable-colorbox\"\n                    style={{ backgroundColor: color }}\n                >\n                    {/* Colorbox content; name and delete button */}\n                    <div\n                        className={`draggable-colorbox__content ${\n                            editMode && \"edit\"\n                        }`}\n                    >\n                        <div style={{ color: fontColor(color) }}>{color}</div>\n                        <IconButton size=\"small\" onClick={this.clickDelete}>\n                            <DeleteSharpIcon\n                                fontSize=\"small\"\n                                className={\"font-\" + fontColor(color)}\n                            />\n                        </IconButton>\n                    </div>\n\n                    {/* Rendering the edit color preview */}\n                    {editMode && renderEdit}\n\n                    {/* Border that visually tells which color is being edited */}\n                    <div\n                        className=\"draggable-colorbox--border\"\n                        style={{\n                            transition: \"border-width 150ms ease-in-out\",\n                            border: `${\n                                editMode\n                                    ? \"max(3px, 0.4vw) solid \" +\n                                      fontColor(color)\n                                    : \"0px solid \" + fontColor(color)\n                            }`,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SortableElement(DraggableColorBox);\n","import React from \"react\";\nimport { SortableContainer } from \"react-sortable-hoc\";\n\nimport DraggableColorBox from \"./DraggableColorBox\";\n\nfunction DraggableColorList({\n    colors, // String Array of colors in palette \n    editColor, // String of color being edited, in hex (color id)\n    showSidebar, // Boolean to display sidebar\n    handleDeleteColor, // Function to delete color \n    selectColor, // Function to select color to edit \n}) {\n    return (\n        <div className=\"NewPaletteForm__main__content__colorbox-container\">\n            {colors.map((color, index) => {\n                return (\n                    <DraggableColorBox\n                        key={color}\n                        color={color}\n                        index={index}\n                        showSidebar={showSidebar}\n                        selectColor={selectColor}\n                        handleDeleteColor={handleDeleteColor}\n                        editColor={editColor}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default SortableContainer(DraggableColorList);\n","import React, { Component } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { arrayMove } from \"react-sortable-hoc\";\n\nimport NewPaletteSidebar from \"./NewPaletteSidebar\";\nimport NewPaletteNav from \"./NewPaletteNav\";\nimport PaletteSubmitForm from \"./PaletteSubmitForm\";\nimport DraggableColorList from \"./DraggableColorList\";\n\nexport default class NewPaletteForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            paletteForm: {\n                paletteName: \"\",\n                id: \"\",\n                emoji: \"\",\n                colors: JSON.parse(localStorage.getItem(\"currentEdit\")) || [],\n            },\n            paletteNameError: \"\",\n            showSidebar: true,\n            showSubmission: false,\n            exitBlock: true,\n            editColor: {\n                edit: false,\n                color: \"#000000\",\n                originalColor: \"#000002\",\n            },\n        };\n\n        this.handleSidebarToggle = this.handleSidebarToggle.bind(this);\n        this.handleOpenInput = this.handleOpenInput.bind(this);\n        this.handleCloseInput = this.handleCloseInput.bind(this);\n        this.handleAddPalette = this.handleAddPalette.bind(this);\n        this.handleExit = this.handleExit.bind(this);\n        this.handleDeleteColor = this.handleDeleteColor.bind(this);\n        this.handleOnTextChange = this.handleOnTextChange.bind(this);\n        this.handleEmojiChange = this.handleEmojiChange.bind(this);\n        this.handleEmojiDialog = this.handleEmojiDialog.bind(this);\n        this.handleConfirmDialog = this.handleConfirmDialog.bind(this);\n        this.handleBrowserBack = this.handleBrowserBack.bind(this);\n        this.selectColor = this.selectColor.bind(this);\n        this.cancelEdit = this.cancelEdit.bind(this);\n        this.updateColor = this.updateColor.bind(this);\n        this.changeColor = this.changeColor.bind(this);\n        this.updatePalette = this.updatePalette.bind(this);\n        this.setPalette = this.setPalette.bind(this);\n        this.clearPalette = this.clearPalette.bind(this);\n    }\n\n    componentDidMount() {\n        const { palettes } = this.props;\n\n        /**\n         * Creates validation rule to check for unique palette names\n         * when saving a palette\n         **/\n        ValidatorForm.addValidationRule(\"isPaletteNameUnique\", (value) => {\n            return palettes.every(\n                ({ paletteName }) =>\n                    value.toLowerCase() !== paletteName.toLowerCase()\n            );\n        });\n    }\n\n    // Closes the save palette pop up form\n    handleCloseInput() {\n        this.setState({ showSubmission: false });\n    }\n\n    // Initiates the save palette pop up form\n    handleOpenInput(e) {\n        e.stopPropagation();\n        this.setState({ showSubmission: \"pickPaletteName\" });\n    }\n\n    // Converts 'Material UI Colors' to 'material-ui-colors'\n    convertPaletteName(name) {\n        return name\n            .split(\" \")\n            .map((x) => x.toLowerCase())\n            .join(\"-\");\n    }\n\n    // Opens the sidebar and closes the color box edit menu\n    handleSidebarToggle() {\n        this.setState(\n            {\n                showSidebar: !this.state.showSidebar,\n            },\n            () => this.cancelEdit()\n        );\n    }\n\n    /**\n     * Deletes colorbox and sets the color to edit to be '#fffff2' in order to\n     * allow editing of the defaulted #ffffff color. After adding a color,\n     * the color to add defaults to #ffffff\n     *\n     * however, I wrote the select color to edit function to close the edit menu\n     * should you click on the same color. Thus, a bug is created if the user\n     * tries to edit the defaulted color; edit menu automatically closes and it\n     * looks like nothing happened\n     **/\n\n    handleDeleteColor(colorHex) {\n        const { colors } = this.state.paletteForm;\n        const newColors = colors.filter((color) => color !== colorHex);\n        this.setState({\n            paletteForm: {\n                colors: newColors,\n            },\n            editColor: {\n                ...this.state.editColor,\n                edit: false,\n                originalColor: \"#fffff2\",\n            },\n        });\n    }\n\n    // Handles typing in save palette form pop up\n    handleOnTextChange(e) {\n        this.setState({\n            paletteForm: {\n                ...this.state.paletteForm,\n                paletteName: e.target.value,\n            },\n        });\n    }\n\n    // Handles selecting an emoji in the save palette form pop up\n    handleEmojiChange(emojiObj) {\n        this.setState(\n            {\n                paletteForm: {\n                    ...this.state.paletteForm,\n                    emoji: emojiObj.native,\n                },\n            },\n            () => {\n                this.handleAddPalette();\n            }\n        );\n    }\n\n    // Opens the 2nd half of the save palette form pop up; selecting an emoji\n    handleEmojiDialog() {\n        this.setState({ showSubmission: \"pickEmoji\" });\n    }\n\n    // Opens the 'Leaving Confirmation' pop up\n    handleConfirmDialog() {\n        this.setState({ showSubmission: \"pickConfirm\" });\n    }\n\n    /**\n     * <Prompt /> Component's message attribute allows for a function to be set\n     * and if that function returns false, then the back button is negated.\n     * This was something I figured out by reading the docs lol. Saved me a lot\n     * of time trying to hack the default of clicking the browser's back button\n     *\n     * handleConfirmDialog opens up the 'Leaving Confirmation' pop up wherein\n     * I can control whether or not to push to history\n     **/\n    handleBrowserBack() {\n        this.handleConfirmDialog();\n        return false;\n    }\n\n    // Saves the palette and returns user to the palette list page\n    handleAddPalette() {\n        const { paletteName, emoji, colors } = this.state.paletteForm;\n\n        const newPalette = {\n            paletteName: paletteName,\n            id: this.convertPaletteName(this.state.paletteForm.paletteName),\n            emoji: emoji,\n            colors: colors,\n        };\n\n        this.setState({ exitBlock: false }, () => {\n            this.props.savePalette(newPalette);\n            this.props.history.push(\"/React-Colors\");\n        });\n    }\n\n    /**\n     * Clears localStorage of the current palette being edited on and also\n     * sets exitBlock off in order to allow for no confirmation for the <Prompt />\n     * component, which prevents an infinite loop\n     *\n     * After, pushes to history and takes the user back to the palette list page\n     **/\n\n    handleExit() {\n        localStorage.removeItem(\"currentEdit\");\n        this.setState({ exitBlock: false }, () => {\n            this.props.history.push(\"/React-Colors\");\n        });\n    }\n\n    // Clears the current palette list colors and closes out the edit menu\n    clearPalette() {\n        this.setState(\n            {\n                paletteForm: {\n                    paletteName: \"\",\n                    colors: [],\n                    emoji: \"\",\n                },\n            },\n            () => {\n                this.cancelEdit();\n            }\n        );\n    }\n\n    /**\n     * Updates the current palette of colors being worked on with a new array\n     * and then resets the currentEdit in lS with the new array\n     **/\n    setPalette(array) {\n        this.setState(\n            {\n                paletteForm: {\n                    colors: array,\n                },\n            },\n            () => {\n                localStorage.setItem(\n                    \"currentEdit\",\n                    JSON.stringify(this.state.paletteForm.colors)\n                );\n            }\n        );\n    }\n\n    /**\n     * Opens the edit menu, will close the edit menu if color box clicked on is \n     * the same one being edited\n     **/\n    selectColor(color) {\n        if (color === this.state.editColor.originalColor) {\n            this.cancelEdit();\n            return;\n        }\n\n        this.setState({\n            editColor: {\n                edit: true,\n                color: color,\n                originalColor: color,\n            },\n        });\n    }\n\n    // Changes the color preview of the color to be edited to via color picker\n    changeColor(color) {\n        this.setState({\n            editColor: {\n                ...this.state.editColor,\n                color: color,\n            },\n        });\n    }\n\n    // Closes and resets the edit menu \n    cancelEdit() {\n        this.setState({\n            editColor: {\n                ...this.state.editColor,\n                edit: false,\n                originalColor: \"#fffff2\",\n            },\n        });\n    }\n\n    // Finalizes the edited color to the new color and saves change in lS \n    updateColor(originalColor, newColor) {\n        if (originalColor === newColor) {\n            this.cancelEdit();\n            return;\n        }\n\n        const { paletteForm } = this.state;\n\n        const newColors = paletteForm.colors.map((color) => {\n            if (color === originalColor) {\n                return newColor;\n            } else {\n                return color;\n            }\n        });\n\n        this.setState(\n            {\n                paletteForm: {\n                    colors: newColors,\n                },\n            },\n            () => {\n                this.cancelEdit();\n                localStorage.setItem(\n                    \"currentEdit\",\n                    JSON.stringify(this.state.paletteForm.colors)\n                );\n            }\n        );\n    }\n\n    // Adds a color onto the palette's color array \n    updatePalette(color) {\n        this.setState({\n            paletteForm: {\n                colors: [...this.state.paletteForm.colors, color],\n            },\n        });\n    }\n\n    /** \n     * Function required to allow for draggability of colorboxes, saves new \n     * arrangement in lS\n     **/\n    onSortEnd = ({ oldIndex, newIndex }) => {\n        this.setState(\n            (prev) => ({\n                paletteForm: {\n                    ...prev.paletteForm,\n                    colors: arrayMove(\n                        prev.paletteForm.colors,\n                        oldIndex,\n                        newIndex\n                    ),\n                },\n            }),\n            () => {\n                localStorage.setItem(\n                    \"currentEdit\",\n                    JSON.stringify(this.state.paletteForm.colors)\n                );\n            }\n        );\n    };\n\n    render() {\n        const {\n            showSidebar, // Boolean: indicates whether to open sidebar\n            showSubmission, // String: indicates which pop up prompt to open\n            exitBlock, // Boolean: indicates whether to trigger <Prompt />\n            editColor, // Object: {str: color, str: originalColor, bool: edit}\n            paletteForm: {\n                colors, // String Array: name of colors (hex, rgb, rgba)\n                paletteName // String: 'Material UI Colors'\n            },\n        } = this.state;\n\n        return (\n            <div className=\"NewPaletteForm\">\n                {/* Prompt to stop the user from leaving an unsaved palette */}\n                <Prompt when={exitBlock} message={this.handleBrowserBack} />\n\n                {/* Pop up for clicking 'Save Palette' */}\n                <PaletteSubmitForm\n                    open={showSubmission}\n                    paletteName={paletteName}\n                    handleCloseInput={this.handleCloseInput}\n                    handleOnTextChange={this.handleOnTextChange}\n                    handleEmojiChange={this.handleEmojiChange}\n                    handleEmojiDialog={this.handleEmojiDialog}\n                />\n\n                {/* Main Content of New Palette */}\n                <main\n                    className={`NewPaletteForm__main ${showSidebar && \"show\"}`}\n                >\n                    {/* Navbar */}\n                    <NewPaletteNav\n                        open={showSubmission}\n                        showSidebar={showSidebar}\n                        isEmpty={colors.length === 0}\n                        handleSidebarToggle={this.handleSidebarToggle}\n                        handleOpenInput={this.handleOpenInput}\n                        handleCloseInput={this.handleCloseInput}\n                        handleConfirmDialog={this.handleConfirmDialog}\n                        handleExit={this.handleExit}\n                    />\n                    {/* Holds the draggable colorboxes */}\n                    <div className=\"NewPaletteForm__main__content\">\n                        <DraggableColorList\n                            colors={colors}\n                            editColor={editColor}\n                            showSidebar={showSidebar}\n                            handleDeleteColor={this.handleDeleteColor}\n                            selectColor={this.selectColor}\n                            onSortEnd={this.onSortEnd}\n                            axis=\"xy\"\n                            distance={1}\n                        />\n                    </div>\n                </main>\n\n                {/* New Palette Sidebar */}\n                <NewPaletteSidebar\n                    showSidebar={showSidebar}\n                    paletteColors={colors}\n                    editColor={editColor}\n                    handleSidebarToggle={this.handleSidebarToggle}\n                    clearPalette={this.clearPalette}\n                    updatePalette={this.updatePalette}\n                    setPalette={this.setPalette}\n                    updateColor={this.updateColor}\n                    changeColor={this.changeColor}\n                    cancelEdit={this.cancelEdit}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Palette from \"./Palette\";\nimport seedColors from \"../utility/seedColors\";\nimport SingleColorPalette from \"./SingleColorPalette\";\nimport PaletteList from \"./PaletteList\";\nimport NewPaletteForm from \"./NewPaletteForm\";\nimport { addColorRange, addSingleColorRange } from \"../utility/ColorUtility\";\n\nimport \"../scss/style.scss\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            palettes:\n                JSON.parse(localStorage.getItem(\"palettes\")) || seedColors,\n        };\n\n        this.savePalette = this.savePalette.bind(this);\n        this.deletePalette = this.deletePalette.bind(this);\n        this.findPalette = this.findPalette.bind(this);\n        this.findSinglePalette = this.findSinglePalette.bind(this);\n    }\n\n    /**\n     * Whenever a palette is deleted or added, localStorage for the\n     * currentEdit is removed and the lS key for palettes is updated\n     **/\n    componentDidUpdate() {\n        localStorage.removeItem(\"currentEdit\");\n        const jsonPalette = JSON.stringify(this.state.palettes);\n        localStorage.setItem(\"palettes\", jsonPalette);\n    }\n\n    // Find and create a Palette component based on id of URL params\n    findPalette(renderProps) {\n        const paletteId = renderProps.match.params.id;\n        const { palettes } = this.state;\n\n        let palette = palettes.find((palette) => palette.id === paletteId);\n        if (palette === undefined) return <Redirect to=\"/React-Colors\" />;\n\n        return <Palette palette={addColorRange(palette)} />;\n    }\n\n    /**\n     *  Find and create a SinglePalette component (same color, different shades)\n     *  based on id of URL params\n     **/\n    findSinglePalette(renderProps) {\n        const { palettes } = this.state;\n        const paletteId = renderProps.match.params.id;\n        const hexNoHash = renderProps.match.params.hexNoHash;\n        const palette = palettes.find((palette) => palette.id === paletteId);\n        const color = palette.colors.find((color) => {\n            return color.slice(1).toLowerCase() === hexNoHash;\n        });\n\n        return (\n            <SingleColorPalette\n                renderProps={renderProps}\n                palette={addSingleColorRange(palette, color)}\n            />\n        );\n    }\n\n    // Updates the current list of palettes with a new palette\n    savePalette(palette) {\n        const newState = [...this.state.palettes, palette];\n        this.setState({ palettes: newState });\n    }\n\n    // Deletes a palette from state based on palette.id\n    deletePalette(paletteId) {\n        const newState = this.state.palettes.filter((x) => x.id !== paletteId);\n        this.setState({ palettes: newState });\n    }\n\n    render() {\n        const { palettes } = this.state;\n\n        return (\n            <>\n                <Switch>\n                    {/* Route for palette creation */}\n                    <Route\n                        exact\n                        path=\"/React-Colors/palette/new\"\n                        render={(routeProps) => {\n                            return (\n                                <NewPaletteForm\n                                    {...routeProps}\n                                    savePalette={this.savePalette}\n                                    palettes={palettes}\n                                />\n                            );\n                        }}\n                    />\n\n                    {/* Route for a Palette */}\n                    <Route\n                        exact\n                        path=\"/React-Colors/palette/:id\"\n                        render={this.findPalette}\n                    />\n\n                    {/* Route for Single Color Palette */}\n                    <Route\n                        exact\n                        path=\"/React-Colors/palette/:id/:hexNoHash\"\n                        render={this.findSinglePalette}\n                    />\n\n                    {/* Default Route is the index for all palettes */}\n                    <Route\n                        exact\n                        path=\"/React-Colors\"\n                        render={() => {\n                            return (\n                                <PaletteList\n                                    palettes={palettes}\n                                    deletePalette={this.deletePalette}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}